/// Btc grammar.
use crate::syntax;
use crate::syntax::*;
use std::str::FromStr;

grammar;

Comma<Rule>: Vec<Rule> = {
    <mut v:(<Rule> ",")*> <e:Rule?> => match e { 
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Nat : u32 = {
    <s:r"[0-9]+"> => u32::from_str(s).unwrap(),
}

pub Identifier : syntax::Name = {
    <s: r"_?[a-zA-Z][_a-zA-Z0-9-']*"> => String::from(s),
}

pub TyStructBody : (syntax::Name, syntax::Type) = {
    <name: Identifier> ":" <ty: Type> => (name, ty),
}

pub TermStructBody : (syntax::Name, syntax::Expr) = {
    <name: Identifier> ":" <e: Expr> => (name, e)
}

// No operator precedence for now
pub Operator : syntax::Operator = {
    "+" => Operator::Add, 
    "-" => Operator::Sub, 
    "*" => Operator::Mul, 
    "/" => Operator::Div, 
    ">" => Operator::Gt, 
    "<" => Operator::Lt, 
    "==" => Operator::Eq,
}


pub Type : syntax::Type = {
    "Unit" => Type::Unit,
    "Natural" => Type::Natural, 
    "String" => Type::String, 
    "Bool" => Type::Bool,
    "(" <name: Identifier> ")" => Type::Named(name),
    "List" "[" <t: Type> "]" => Type::List(Box::new(t)),
    "(" <tys : Comma<Type>> ")" "->" <result: Type> => Type::Arrow(tys, Box::new(result)),
    <name : Identifier> "{"  <body: Comma<TyStructBody>> "}" => Type::Struct(name, body),
}

pub Expr : syntax::Expr = {
    "(" <e: Expr> ")" => e, 

    "unit" => Expr::Unit,

    <id: Identifier> => Expr::Variable(id),
    
    <n: Nat> => Expr::Natural(n), 

    // Hack for now
    "\"" <s: Identifier> "\"" => Expr::String(s),

    "true" => Expr::Bool(true), 
    "false" => Expr::Bool(false),

    "(" <e: Expr> ":" <ty: Type> ")" => Expr::Annotation(Box::new(e), ty),

    "let" <name: Identifier>  "=" <e: Expr> ";" "(" <body: Expr?> ")" => match body {
        None => Expr::Let(name, Box::new(e), Box::new(Expr::Unit)), 
        Some(body) =>  Expr::Let(name, Box::new(e), Box::new(body)), 
    },

    "[" <elems: Comma<Expr>> "]" => Expr::List(elems), 

    "if" <predicate: Expr> "{" <t: Expr> "}" "else" "{" <f: Expr> "}" => 
        Expr::If(Box::new(predicate), Box::new(t), Box::new(f)), 

    "function" "(" <args: Comma<Identifier>> ")" "->" "{" <body: Expr> "}" => { 
        let args = if args.is_empty() { vec![ String::from("unit") ] } else { args };
        Expr::Lambda(args, Box::new(body)) 
    },

    <f: Expr> "(" <args: Comma<Expr>> ")" => {
        let args = if args.is_empty() { vec![Expr::Unit] } else { args };
        Expr::Application(Box::new(f), args)
    },

    "(" <name: Identifier> "{" <body: Comma<TermStructBody>> "}" ")" => Expr::Struct(name, body),

    "(" <a: Expr> <op: Operator> <b: Expr> ")" => Expr::Primitive(op, Box::new(a), Box::new(b)),

    <e: Expr> "." <field: Identifier> => Expr::StructIndex(Box::new(e), field),
}

pub Return : Type = {
    "->" <ty: Type> => ty,
        => Type::Unit,
}

pub Def : syntax::Def = {
    "struct" <id: Identifier> "{"  <body: Comma<TyStructBody>>  "}" => Def::Struct(id, body), 
    "function" <name: Identifier> "("  <args: Comma<TyStructBody>> ")" <codomain: Return> "{" <body: Expr> "}" => {
        let (args, tys) : (Vec<_>, Vec<_>)= args.into_iter().unzip();
        let domain = if tys.is_empty() { vec![Type::Unit] } else { tys };
        let args = if args.is_empty() { vec![String::from("unit")] } else { args };
        let f = Type::Arrow(domain, Box::new(codomain)); 
        let lambda = Expr::Lambda(args, Box::new(body));
        Def::Fun(name, Expr::Annotation(Box::new(lambda), f))
    }
};

pub Program : Vec<syntax::Def> = {
    Def => vec![<>], 
    <mut p: Program> <d: Def> => {
        p.push(d); 
        p
    }
}